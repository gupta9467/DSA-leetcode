public class Solution {
    TreeNode pre;
    public void flatten(TreeNode root) {
        if(root == null) return;
        pre = new TreeNode(-1);
        preorder(root);
    }
    private void preorder(TreeNode node) {
        if(node == null) return;
        TreeNode left = node.left;
        TreeNode right = node.right;
        pre.left = null;
        pre.right = node;
        pre = node;
        preorder(left);
        preorder(right);
    }
}
/* Method 2*/
class Solution {
    static List<Integer> list;
    public static void preOrder(TreeNode root) {
        if (root == null)
            return;
        list.add(root.val);
        preOrder(root.left);
        preOrder(root.right);
    }

    public static void flattenUtil(TreeNode root) {
        if(root==null) return;
        TreeNode temp = root;
        root.left = null;
        root.right = null;
        for (int i = 1; i < list.size(); i++) {
            temp.right = new TreeNode(list.get(i));
            temp = temp.right;
        }
    }
    public void flatten(TreeNode root) {
        list = new ArrayList<>();
        preOrder(root);
        flattenUtil(root);
    }
}
